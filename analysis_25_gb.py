# -*- coding: utf-8 -*-
"""Analysis_25_gb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15N44fNhxmouVQm__uEqUd9lPRRoK8J4H
"""

import matplotlib.pyplot as plt
import seaborn as sb
import numpy as np
import pandas as pd
d1 = pd.read_csv('UDP.csv', nrows=650000, low_memory=False)
d2 = pd.read_csv('Syn.csv', nrows=650000, low_memory=False)

"""# DATA CLEANUP"""

d1.columns

d2.columns

features = d1.columns+d2.columns

# len(features)
# features.drop(['Unnamed: 0'],axis = 1)

d1[' Label'].unique()

d1[' Label'].value_counts()

d2[' Label'].value_counts()

mssql_data = d1[d1[' Label']=='MSSQL']
udp_data = d1[d1[' Label']=='UDP']
syn_data = d2[d2[' Label']=='Syn']
benign_data1 = d1[d1[' Label']=='BENIGN']
benign_data2 = d2[d2[' Label']=='BENIGN']

print(mssql_data[' Label'].value_counts())
print(udp_data[' Label'].value_counts())
print(syn_data[' Label'].value_counts())
print(benign_data1[' Label'].value_counts())
print(benign_data2[' Label'].value_counts())

data = pd.concat([udp_data,syn_data]).reset_index(drop=True)

data.head()

data.describe()

data.info()

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
classes = ['UDP','SYN']
count = [len(udp_data),len(syn_data)]
ax.bar(classes,count)
plt.show()

data[' Label'].unique()

def mapping_function(datafr):
    unique_values = list(datafr.unique())
    unique_values_map = {}
    k = 1
    for i in unique_values:
        if i not in unique_values_map:
            unique_values_map[i] = k
            k=k+1
    return unique_values_map

data['Flow ID'] = data['Flow ID'].map(mapping_function(data['Flow ID']))

data[' Source IP'] = data[' Source IP'].map(mapping_function(data[' Source IP']))
data[' Destination IP'] = data[' Destination IP'].map(mapping_function(data[' Destination IP']))

data['SimillarHTTP'] = data['SimillarHTTP'].map(mapping_function(data['SimillarHTTP']))

data = data.drop(columns=' Timestamp')

data.info()

#remove nans and infs
print(data['Flow Bytes/s'])

mask = data['Flow Bytes/s'] != np.inf
data.loc[~mask, 'Flow Bytes/s'] = data.loc[mask, 'Flow Bytes/s'].max()

print(data['Flow Bytes/s'])

data['Flow Bytes/s'] = data['Flow Bytes/s'].fillna(0)
data['Flow Bytes/s'] = data['Flow Bytes/s'].astype('float64')

print(data['Flow Bytes/s'])

#remove nans and infs from data[' Flow Packets/s']
data[' Flow Packets/s']

mask = data[' Flow Packets/s'] != np.inf
data.loc[~mask, ' Flow Packets/s'] = data.loc[mask, ' Flow Packets/s'].max()

data[' Flow Packets/s'] = data[' Flow Packets/s'].fillna(0)
data[' Flow Packets/s'] = data[' Flow Packets/s'].astype('float64')

data[' Flow Packets/s']

data.info()

data[' Label'] = data[' Label'].map({'UDP':1,'Syn':2})

data = data.dropna()

"""# Visualization"""

df = data.drop(columns=[' Label'])
y = data[' Label']

df.info()

"""#Distribution Types

"""

import seaborn as sns
import matplotlib.pyplot as plt

df = df.drop(columns=['Unnamed: 0','Flow ID',' Source IP',' Destination IP'])

data.hist(figsize=(30, 30),xlabelsize=8, ylabelsize=8);

for col in df.columns:
  plt.hist(data[col].where(data[' Label']==1),30,ls='dashed', lw=3, fc=(0, 0, 1, 0.5))
  plt.hist(data[col].where(data[' Label']==2),30,ls='dotted', lw=3, fc=(1, 0, 0, 0.5))
  plt.title(col)
  plt.show()

"""# Applying Transformations"""

def remove_outlier(df_in):
    q1 = df_in.quantile(0.25)
    q3 = df_in.quantile(0.75)
    iqr = q3-q1 #Interquartile range
    fence_low  = q1-1.5*iqr
    fence_high = q3+1.5*iqr
    df_out = df_in[(df_in > fence_low) & (df_in < fence_high)]
    return df_out

#Logarithmic transform
for col in df.columns:
  plot_np = np.log(data[col].where(data[' Label']==1))
  #plot_np2 = np.log(data[col].where(data[' Label']==2))
  plot_df1 = pd.DataFrame(plot_np).replace(-np.Inf,0)
  plot_df1 = remove_outlier(plot_df1)
  #plot_df2 = pd.DataFrame(plot_np2).replace(-np.Inf,0)
  sns.distplot(plot_df1).set_title(col)
  #sns.displot(plot_df2,kde=False).set_title(col)
  plt.show()
  sns.boxplot(data = plot_df1,orient="h")
  plt.title("Boxplot for"+str(col))
  plt.show()

# UDP data
((pd.DataFrame(np.log(data.where(data[' Label']==1)))).replace(-np.Inf,0)).hist(figsize=(30, 30),xlabelsize=8, ylabelsize=8);

#Syn
((pd.DataFrame(np.log(data.where(data[' Label']==2)))).replace(-np.Inf,0)).hist(figsize=(30, 30),xlabelsize=8, ylabelsize=8);

"""#Hypothesis Testing

#####Null Hypothesis:
H0: There exists no relation between the two features
H1: There exists a relation between the features under consideration
"""

# Choosing columns with categorical data for chi square test
cols = []
for col in df.columns:
  if len(data[col].unique())<=3:
    print(col)
    cols.append(col)

"""Chi Square Test"""

#For UDP attack
pd.crosstab(data[' SYN Flag Count'].where(data[' Label']==1),data[' ACK Flag Count'].where(data[' Label']==1))

#For SYN attack
pd.crosstab(data[' SYN Flag Count'].where(data[' Label']==2),data[' ACK Flag Count'].where(data[' Label']==2))

# Relation between ACK Flag Count and SYN Flag Count during UDP attack 
from scipy.stats import chi2_contingency 
print('Relation between ACK Flag Count and SYN Flag Count during UDP attack')
print(pd.crosstab(data[' SYN Flag Count'].where(data[' Label']==1),data[' ACK Flag Count'].where(data[' Label']==1)))
stat, p, dof, expected = chi2_contingency(pd.crosstab(data[' SYN Flag Count'].where(data[' Label']==1),data[' ACK Flag Count'].where(data[' Label']==1))) 
alpha = 0.05
print("p value is " + str(p)) 
print(' ACK Flag Count',' SYN Flag Count','For UDP')
if p > alpha:
    print('Independent (H0 holds true)')       
else: 
    print('Dependent (reject H0)')

# Relation between ACK Flag Count and SYN Flag Count during SYN attack 
print()
print('Relation between ACK Flag Count and SYN Flag Count during SYN attack')
print(pd.crosstab(data[' SYN Flag Count'].where(data[' Label']==2),data[' ACK Flag Count'].where(data[' Label']==2)))
stat, p, dof, expected = chi2_contingency(pd.crosstab(data[' SYN Flag Count'].where(data[' Label']==2),data[' ACK Flag Count'].where(data[' Label']==2))) 
alpha = 0.05
print("p value is " + str(p)) 
print(' ACK Flag Count',' SYN Flag Count','For SYN')
if p > alpha:
    print('Independent (H0 holds true)')       
else: 
    print('Dependent (reject H0)')

pd.crosstab(data[' SYN Flag Count'],data[' Bwd PSH Flags'])

#Relation between SYN Flag Count and Bwd PSH Flags
from scipy.stats import chi2_contingency 
stat, p, dof, expected = chi2_contingency(pd.crosstab(data[' SYN Flag Count'],data[' Bwd PSH Flags'])) 
alpha = 0.05
print("p value is " + str(p)) 
print(' SYN Flag Count',' Bwd PSH Flags')
if p > alpha:
    print('Independent (H0 holds true)')       
else: 
    print('Dependent (reject H0)')

#Chi Square Test
#Null hypothesis: There exists no relation between the features
from scipy.stats import chi2_contingency 
for col1 in cols:
  for col2 in cols:
    if col1!=col2:
      stat, p, dof, expected = chi2_contingency(pd.crosstab(data[col1],data[col2])) 
      alpha = 0.05
      print("p value is " + str(p)) 
      print(col1,col2)
      if p > alpha:
          print('Independent (H0 holds true)')       
      else: 
          print('Dependent (reject H0)')



"""T Test"""

# T test
# If score<0.05, there exists a relation between the columns
from scipy.stats import ttest_ind
for col1 in df.columns:
  for col2 in df.columns:
    if col1!=col2:
      score = ttest_ind(data[col1], data[col2])[1]
      if score<0.05:
        print(col1+" & "+col2+" : "+str(score))

# Relation between ACK Flag Count and Fwd Packets/s and Init_Win_bytes_backward
udp = data[data[' ACK Flag Count']==0]
syn = data[data[' ACK Flag Count']==1]
print(ttest_ind(udp['Fwd Packets/s'], syn['Fwd Packets/s']))# H0
print(ttest_ind(udp[' Init_Win_bytes_backward'],syn[' Init_Win_bytes_backward']))# H0

score = ttest_ind(data['Fwd Avg Bytes/Bulk'], data[' Inbound'])
print(score) # H0

score = ttest_ind(data[' Fwd Header Length'],data['Subflow Fwd Packets'])
print(score) #H0















plt.hist(pd.DataFrame((np.exp(data[' Average Packet Size'].where(data[' Label']==1))).replace(np.Inf,np.nan)).dropna())
plt.show()

import statsmodels.api as sm 
import pylab as py 
for col in df.columns:
  print(col)
  plot_dframe = pd.DataFrame(np.log(data[col].where(data[' Label']==1))).replace(np.Inf,np.nan).replace(-np.Inf,np.nan)
  sm.qqplot(plot_dframe.dropna(),line="45")
  py.show()























df1 = data.copy()

int(0.75*(len(df1)//2))

(df1['Idle Mean'].value_counts()[0])//2 > int(0.75*(len(df1)//2))

if (list(df1[' Fwd Packet Length Mean'].value_counts())[0])//2 > int(0.20*(len(df1)//2)):
  df2 = df1.loc[df1[' Fwd Packet Length Mean'] != int(df1[' Fwd Packet Length Mean'].mode())]
  plt.hist(df2[' Fwd Packet Length Mean'].where(df2[' Label']==1),30,ls='dashed', lw=3, fc=(0, 0, 1, 0.5))
  plt.hist(df2[' Fwd Packet Length Mean'].where(df2[' Label']==2),30,ls='dotted', lw=3, fc=(1, 0, 0, 0.5))
  plt.title(' Fwd Packet Length Mean')
  plt.show()

if (df1['Idle Mean'].value_counts()[0])//2 > int(0.75*(len(df1)//2)):
  df2 = df1.loc[df1['Idle Mean'] != int(df1['Idle Mean'].mode())]
  plt.hist(df2['Idle Mean'].where(df2[' Label']==1),30,ls='dashed', lw=3, fc=(0, 0, 1, 0.5))
  plt.hist(df2['Idle Mean'].where(df2[' Label']==2),30,ls='dotted', lw=3, fc=(1, 0, 0, 0.5))
  plt.title('Idle Mean')
  plt.show()

list(df1[' ACK Flag Count'].value_counts())[1]

from scipy.stats import chisquare

df1 = data
for col in df.columns:
  df2 = df1
  k=1
  li = list(df1[col].value_counts())
  if (li[0])//2 > int(0.40*(len(df1)//2)):
#  if (list(df1[col].value_counts())[0])//2 > int(0.50*(len(df1)//2)):
    df2 = df1.loc[df1[col] != int(df1[col].mode())]
    #print(df1[col].mode())
    li.pop(0)
    while (len(li)>0 and k<4):
      if (li[0]//2 > int(0.20*(len(df1)//4))):
#  if (list(df1[col].value_counts())[0])//2 > int(0.50*(len(df1)//2)):
        df2 = df2.loc[df2[col] != int(df2[col].mode())]
        #print(df2[col].mode())
        li.pop(0)  
      k+=1
  #if len(df2[col].where(df2[' Label']==1).dropna().values)>8 and len(df2[col].where(df2[' Label']==1).dropna().values)>8:    
  print(chisquare((df2[col].where(df2[' Label']==1).dropna().values)))
  print(chisquare((df2[col].where(df2[' Label']==2).dropna().values)))    
  plt.hist((df2[col].where(df2[' Label']==1).dropna().values),30,ls='dashed', lw=3, fc=(0, 0, 1, 0.5))
  plt.hist((df2[col].where(df2[' Label']==2).dropna().values),30,ls='dotted', lw=3, fc=(1, 0, 0, 0.5))
  plt.title(col)
  plt.show()

td0 = data[data[' Label']==1]
td1 = data[data[' Label']==2]

counts,bin_edges = np.histogram(td0[' Average Packet Size'],bins=10,density=True)
pdf = counts/(sum(counts))
print(pdf);
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:],pdf)
plt.plot(bin_edges[1:],cdf)

plt.title("CDF and PDF plots",y=1.00)
plt.xlabel('Average Packet Size')
plt.ylabel('Probability')
plt.show();

counts,bin_edges = np.histogram(td1[' Average Packet Size'],bins=10,density=True)
pdf = counts/(sum(counts))
print(pdf);
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:],pdf)
plt.plot(bin_edges[1:],cdf)

plt.title("CDF and PDF plots",y=1.00)
plt.xlabel('Average Packet Size')
plt.ylabel('Probability')
plt.show();

import seaborn as sns

list(data.columns)

sns.boxplot(x=' ACK Flag Count',y=' Total Fwd Packets',data = td0)
plt.title("Boxplot for ACK Flag Count vs Total Fwd Packets for UDP",y=1.02)
plt.show()
sns.boxplot(x=' ACK Flag Count',y=' Total Fwd Packets',data = td1)
plt.title("Boxplot for ACK Flag Count vs Total Fwd Packets for SYN",y=1.02)
plt.show()

sns.boxplot(x=' URG Flag Count',y=' Total Fwd Packets',data = td0)
plt.title("Boxplot for ACK Flag Count vs Total Fwd Packets for UDP",y=1.02)
plt.show()
sns.boxplot(x=' URG Flag Count',y=' Total Fwd Packets',data = td1)
plt.title("Boxplot for ACK Flag Count vs Total Fwd Packets for SYN",y=1.02)
plt.show()

import scipy

norm_cdf = scipy.stats.norm.cdf(data[' Subflow Fwd Bytes']) # calculate the cdf - also discrete

# plot the cdf
sns.lineplot(x=data[' Subflow Fwd Bytes'], y=norm_cdf)
plt.show()

print(td1)

